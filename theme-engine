#!/usr/bin/bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Theme-Engine                                    ┃
#┃ Copied  : Faisal Ahmed                                    ┃
#┃ Version : 5.4 (Latest)                                    ┃
#┃ Github  : Faisal ahmed <github.com/Faisalvai>             ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

#..............................................................

                       THEME='default'

#..............................................................

## Colors # Day
# foreground
Fgreen=$'\e[0;1;38;2;0;230;118m'   Fblue=$'\e[0;1;38;2;40;90;255m'   Fsky=$'\e[0;1;38;2;0;255;255m'    Fpurple=$'\e[0;1;38;2;101;31;255m' Fyellow=$'\e[0;1;38;2;200;255;0m' Fred=$'\e[0;1;38;2;200;0;0m' Bcyan=$'\e[0;1;38;5;49m'
Sblue=$'\e[1;38;2;100;180;255m'    Sred=$'\e[1;38;2;255;180;180m'
# background
Bgreen=$'\e[0;1;48;2;0;230;118m'   Bblue=$'\e[0;1;48;2;0;80;255m'   Bsky=$'\e[0;1;30;48;2;0;255;255m' Bpurple=$'\e[0;1;48;2;101;31;255m' Byellow=$'\e[0;1;30;48;2;200;255;0m' Bred=$'\e[0;1;48;2;250;0;0m' Bcyan=$'\e[0;1;30;48;5;46m'
Sreset=$'\e[38;2;240;240;240m'     reset=$'\e[0m'

## Colors # Night
# foreground
NFgreen=$'\e[0;1;38;2;0;230;118m'      NFblue=$'\e[0;1;38;2;40;90;255m'   NFsky=$'\e[0;1;38;2;0;255;255m'    NFpurple=$'\e[0;1;38;2;101;31;255m' NFyellow=$'\e[0;1;38;2;200;255;0m' NFred=$'\e[0;1;38;2;200;0;0m' NBcyan=$'\e[0;1;38;5;49m'
# background
NBgreen=$'\e[0;1;90;7;48;2;0;230;118m' NBblue=$'\e[0;1;90;7;48;2;50;170;255m'   NBsky=$'\e[0;1;90;7;30;48;2;0;255;255m' NBpurple=$'\e[0;1;90;7;48;2;200;100;255m' NByellow=$'\e[0;1;90;7;30;48;2;200;255;0m' NBred=$'\e[0;1;90;7;48;2;255;0;0m' NBcyan=$'\e[0;1;;90;7;30;48;5;46m'

## Theme-Engine Version
version="5.4"

## Auto Updater
status='true'

## Specify time
day=`date +%H`
night=`date +%H`

## Arrow
arrow="└─────►"

# identify shell
shell=$(printf "$SHELL")

## distro
distroA=$(uname -o | grep -o "Android")
distroB=$(uname -o | grep -o "Linux")

# Check version
android=$(getprop ro.build.version.release)

# shells list
sh1="bash"
sh2="ksh"
sh3="dash"
sh4="zsh"
sh5="tcsh"
sh6="fish"

#..............................................................

night_print_shell() {
if [[ ${shell} == *'bash'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh1}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'ksh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh2}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'dash'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh3}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'zsh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh4}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'tcsh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh5}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'fish'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh6}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

else
printf "\n\e[0;1m┃\e[1;100m Logged shell — unknown               ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT
fi
}

day_print_shell() {
if [[ ${shell} == *'bash'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh1}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'ksh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh2}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'dash'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh3}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'zsh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh4}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'tcsh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh5}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'fish'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh6}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

else
printf "\n\e[0;1m┃\e[1;7m Logged shell — unknown                 ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT
fi
}

#..............................................................

## sound effect
play_alert() {
tput bel
play ${LOC11}/stdout.wav &> /dev/null &
}
play_error(){
tput bel
play ${LOC11}/error.wav &> /dev/null &
}

#..............................................................

## file names
N0="Theme-Engine" N1="theme-engine"
N2="colors"       N3="fonts" N4="programs"
N5="Terminus.ttf" N6="fonts.rar"
N7="termux.properties" N8="config.theme-engine"
N9="about.theme"  N10="disable.zsh.theme"
N11="unrar.theme" N12="zsh.setup.theme"
N13="highlight.features.theme" N14="error.page"

## directory names
D0="/usr/share" D1="share"
D2="program"    D3=".termux"
D4=".kali"      D5="bin"
D6="src/assets/audio"
D7="src/assets/misc"
D8="/home/kali" D9="/bin"

## directory
directoriesA() { PREFIX="/data/data/com.termux/files/usr"
PDIR="${PREFIX}/${D1}/${N0}" loc1="${PDIR}/${N2}"
loc2="${PDIR}/${N3}"         loc3="${PDIR}/${N4}"
loc4="${PDIR}/${N3}/${N5}"   loc5="${PDIR}/${N3}/${N6}"
loc6="${HOME}/${D3}/${N7}"   loc7="${HOME}/${D3}"
loc8="${HOME}/${D3}/${N8}"   loc9="${PDIR}"
loc10="${PDIR}/${N1}"        loc11="${PDIR}/${D6}"
loc12="${PDIR}/${D7}"        locA="${PREFIX}/${D5}/${N1}"
locB="${loc3}/${N9}"         locC="${loc3}/${N10}"
locD="${loc3}/${N11}"        locE="${loc3}/${N12}"
locF="${loc3}/${N13}"        locG="${loc3}/${N14}"
}

directoriesB() { PREFIX="/usr"
UDIR="${D0}/${N0}"           loc1="${UDIR}/${N2}"
loc2="${UDIR}/${N3}"         loc3="${UDIR}/${N4}"
loc4="${UDIR}/${N3}/${N5}"   loc5="${UDIR}/${N3}/${N6}"
loc6="${D8}/${D4}/${N7}"     loc7="${D8}/${D4}"
loc8="${D8}/${D4}/${N8}"     loc9="${UDIR}"
loc10="${UDIR}/${N1}"        loc11="${UDIR}/${D6}"
loc12="${UDIR}/${D7}"        locA="${D9}/${N1}"
locB="${loc3}/${N9}"         locC="${loc3}/${N10}"
locD="${loc3}/${N11}"        locE="${loc3}/${N12}"
locF="${loc3}/${N13}"        locG="${loc3}/${N14}"
}

## install types
packageA() {
apt install ${1}
}
packageB() {
sudo apt-get install ${1}
}

if [[ $distroA == *'Android'* ]];then
directoriesA
package() {
packageA ${1}
}

elif [[ $distroB == *'Linux'* ]];then
directoriesB
package() {
packageB ${1}
}
#echo "We're working on Linux distros..."
#exit 0
else echo "Theme-Engine isn't supported you're system."
exit 0
fi

default_themeA() {
sed -i "1,20 s/THEME='night'/THEME='default'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

default_themeB() {
sed -i "1,20 s/THEME='light'/THEME='default'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

night_themeA() {
sed -i "1,20 s/THEME='default'/THEME='night'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

night_themeB() {
sed -i "1,20 s/THEME='light'/THEME='night'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

light_themeA() {
sed -i "1,20 s/THEME='night'/THEME='light'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

light_themeB() {
sed -i "1,20 s/THEME='default'/THEME='light'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

#..............................................................

banner0() {
clear
echo "
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃     ${Fred}╺┳╸╻ ╻┏━╸┏┳┓┏━╸   ${Fblue}┏━╸┏┓╻┏━╸╻┏┓╻┏━╸     ${reset}┃
┃     ${Fred} ┃ ┣━┫┣╸ ┃┃┃┣╸ ${reset}╺━╸${Fblue}┣╸ ┃┗┫┃╺┓┃┃┗┫┣╸      ${reset}┃
┃     ${Fred} ╹ ╹ ╹┗━╸╹ ╹┗━╸   ${Fblue}┗━╸╹ ╹┗━┛╹╹ ╹┗━╸     ${reset}┃
┣━━━━━━━━━━━━━━━⌠version ${version}⌡━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
"
}

setup() {
	banner0
	printf " Setting-up Theme-Engine...\n\n"
	printf " Coping files in /data/data/com.termux/files/usr/share directory...\n\n"
	cd ..
if [[ $distroB == *'Linux'* ]];then
	sudo cp -rf Theme-Engine $PREFIX/share &> /dev/null
        cd - &> /dev/null
        sudo cp theme-engine $PREFIX/bin &> /dev/null
else
	cp -rf Theme-Engine $PREFIX/share &> /dev/null
	cd - &> /dev/null
        cp theme-engine $PREFIX/bin &> /dev/null
fi

if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
	printf " Successfully Setup Theme-Engine.\n\n"
	printf " You can run this program by typing \e[92mtheme-engine${reset}\n\n"
	printf " Get Help: \e[92mtheme-engine${reset} --help\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
else
	echo -e " ${reset}Required files was deleted !\n"
	echo -e " ${Fred}Setup failed theme-engine trying to Re-Install...${reset}" ;sleep 0.5 ;cd $HOME
	bash -c " $(curl -fsSL https://github.com/abhackerofficial/Theme-Engine/raw/master/programs/update.theme)"
fi
}

remove() {
if [[ -d "${loc9}" ]] | [[ -f "$PREFIX/bin/theme-engine" ]];then
	banner0
	printf " Uninstalling Theme-Engine...\n\n"
	printf " Remove files in /data/data/com.termux/files/usr/share directory...\n\n"
	rm -rf ${loc9}
	rm $PREFIX/bin/theme-engine
	printf " Successfully Removed Theme-Engine.\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
fi
}

#..............................................................

# Connection
connect() {
connection="$(ping -c 1 -q www.google.com >&/dev/null; echo $?)"
if [[ "$connection" != 0 ]]
   then clear
   bash "${loc3}/error.page"
   exit
 fi
}

## Required Packeges Checking...
   command -v wget > /dev/null 2>&1 || { echo >&2 "I require wget but it's not installed, Now Installing..."; package "wget -y"
 connect
}

   command -v unrar > /dev/null 2>&1 || { echo >&2 "I require unrar but it's not installed, Now Installing..."; package "unrar -y"
 connect
}

if [[ $distroB == *'Linux'* ]];then
command -v tput > /dev/null 2>&1 || { echo >&2 "I require ncurses-bin but it's not installed, Now Installing..."; package "ncurses-bin -y"
 connect
}
else
   command -v tput > /dev/null 2>&1 || { echo >&2 "I require ncurses-utils but it's not installed, Now Installing..."; package "ncurses-utils -y"
 connect
}
fi

if [[ $distroB == *'Android'* ]];then
   command -v lsd > /dev/null 2>&1 || { echo >&2 "I require lsd but it's not installed, Now Installing..."; package "lsd -y"
 connect
}
fi
   command -v sox > /dev/null 2>&1 || { echo >&2 "I require sox but it's not installed, Now Installing..."; package "sox -y"
 connect
}

   command -v zsh > /dev/null 2>&1 || { echo >&2 "I require zsh but it's not installed, Now Installing..."; package "zsh -y"
 connect
}

#..............................................................

checking() {
if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
pwd &> /dev/null
else setup
fi
}

#..............................................................
                           checking
#..............................................................

## arguments

if [[ "${1}" = "-h" ]] || [[ "${1}" = "--help" ]]; then
echo -e "Usage: theme-engine [options...]

available themes:
 --theme -default  : \e[1;90m━━\e[0;1m━━${reset}
 --theme -night    : \e[1;90m━━━━\e[0m${reset}
 --theme -light    : \e[0;1m━━━━\e[0m${reset}

available commands:
 -c  : Start color-scheme menu with this command.
 -f  : Start font-style menu with this command.
 -t  : Start zsh-theme menu with this command.
 -U  : Check available update with this command.
 -L  : Check changelog with this command.

 --updater -off :  Trun off auto-updater with this command.
 --updater -on  :  Turn on auto-updater with this command.
 --uninstall    :  This command to uninstall Theme-Engine."
exit

elif [ "${1}" = "-c" ]; then
	cd ${loc3}
	bash colors.theme
	exit

elif [ "${1}" = "-f" ]; then
	cd ${loc3}
	bash fonts.theme
	exit

elif [ "${1}" = "-t" ]; then
        cd ${loc3}
        bash zsh.theme
        exit

elif [ "${1}" = "-U" ]; then
        cd ${loc3}
        bash update.theme --check
        exit

elif [ "${1}" = "-L" ]; then
	printf "\n${Fgreen}CHANGELOG >${reset}\n\n`cat ${loc9}/CHANGELOG.md`\n\n"
	if [ -f "${loc9}/log" ];then
	printf "${Fyellow}UPDATELOG >${reset}\n\n`cat ${loc9}/log`\n\n"
	fi
	exit

elif [ "${1}" = "--install" ]; then
	setup

elif [ "${1}" = "--uninstall" ]; then
	remove

elif [ "${1}" = "--theme" ]; then
if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-default" ]] || [[ "${2}" = "-DEFAULT" ]]; then
	default_themeA
	default_themeB
	printf "enabled theme: default\n"
	exit

elif [[ "${2}" = "-night" ]] || [[ "${2}" = "-NIGHT" ]]; then
	night_themeA
	night_themeB
        printf "enabled theme: night\n"
	exit

elif [[ "${2}" = "-light" ]] || [[ "${2}" = "-LIGHT" ]]; then
	light_themeA
	light_themeB
        printf "enabled theme: light\n"
        exit
fi

elif [ "${1}" = "--updater" ]; then
	if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-off" ]] || [[ "${2}" = "-OFF" ]]; then
	sed -i "20,40 s/status='true'/status='false'/g" ${locA}
	printf "updater: off\n"
exit
elif [[ "${2}" = "-on" ]] || [[ "${2}" = "-ON" ]]; then
	sed -i "20,40 s/status='false'/status='true'/g" ${locA}
	printf "updater: on\n"
exit
fi

elif [[ $1 != $0 ]] | [[ ${#1} -lt 1 ]];then
pwd &> /dev/null

else
echo "theme-engine: no command specified! '$1'
Try 'theme-engine --help' for more information."
exit
fi

#..............................................................

PUT()  { echo -en "\033[${1};${2}H";}
HIDE() { echo -en "\033[?25l";}
NORM() { echo -en "\033[?12l\033[?25h";}
RCUSR() { echo -ne "\033]12;#b4e1fd\007";}
WAIT() { sleep 0.03 ;}

line1() { printf "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\r" ;}
line2() { printf "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\r" ;}
line3() { echo -e "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓" ;}
line4() { echo -e "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛" ;}
line5() { echo -e "\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫" ;}
ERROR() {
if [[ $distroA == *'Android'* ]];then
echo -e "\e[0;1m
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃\e[1;100m             ✘ You entered Wrong Input !             \e[0;1m┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${reset}";RCUSR
else
echo -e "\e[0;1m
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃\e[1;100m              You entered Wrong Input !              \e[0;1m┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${reset}";RCUSR
fi
}

#..............................................................

# interrupter
exit_on_signal_SIGINT () {
    echo -e "\n"
    RCUSR
    NORM
    exit 0
}

exit_on_signal_SIGTSTP () {
   echo -e "\n"
   RCUSR
   NORM
   exit 0
}

trap exit_on_signal_SIGINT SIGINT ; trap exit_on_signal_SIGTSTP SIGTSTP

#..............................................................

if [ -f "${loc5}" ];then
  if [ -f "${loc4}" ];then
     rm ${loc9}/fonts/fonts.rar ;fi ;fi

#..............................................................

## update files
update_files() {
cp ${loc9}/theme-engine $PREFIX/bin
cp -rf ${loc1} ${loc7}
cp -rf ${loc2} ${loc7}
}

#..............................................................

## Theme-Engine auto-update

night_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;100m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> log
 update_files
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

day_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;7m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> log
 update_files
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

#..............................................................

## Theme-Engine Main Options

night_options() {
   echo -e "\e[0;1m┃${NBred} ┌[1]┐ Apply Color Scheme ${NByellow} ┌[4]┐ Disable Zsh-Theme   \e[0;1m┃${reset}";WAIT

   echo -e "\e[0;1m┃${NBblue} │ 2 │ Apply Font Style   ${NBcyan} │ 5 │ Highlight Features  \e[0;1m┃";WAIT

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Enable Zsh-Theme   ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
else
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Apply Zsh-Theme    ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
fi
}

day_options() {
   echo -e "\e[0;1m┃${Bred} ┌[1]┐ Apply Color Scheme ${Byellow} ┌[4]┐ Disable Zsh-Theme   \e[0;1m┃${reset}";WAIT

   echo -e "\e[0;1m┃${Bblue} │ 2 │ Apply Font Style   ${Bcyan} │ 5 │ Highlight Features  \e[0;1m┃";WAIT

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃${Bpurple} └[3]┘ Enable Zsh-Theme   ${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
else
   echo -e "\e[0;1m┃${Bpurple} └[3]┘ Apply Zsh-Theme    ${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
fi
}

#..............................................................

## Theme-Engine Main Banner

night_banner() {
if [[ $distroB == *'Linux'* ]];then
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                                                    \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred} ▀█▀ █  █ █▀▀ █▀▄▀█ █▀▀   ${NBblue} █▀▀ █▀▀▄ █▀▀▀ ▀ █▀▀▄ █▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}  █  █▀▀█ █▀▀ █ ▀ █ █▀▀ ${Sreset}${NBblue}▀▀ █▀▀ █  █ █ ▀█ █ █  █ █▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}  ▀  ▀  ▀ ▀▀▀ ▀   ▀ ▀▀▀   ${NBblue} ▀▀▀ ▀  ▀ ▀▀▀▀ ▀ ▀  ▀ ▀▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`night_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
else
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                                                    \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred} ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ \e[0;100m▃▃${NBblue}  █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}  █  █▀█ ██▄ █ ▀ █ ██▄ ${NBred}  ${NBblue}  ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                       ${NBred}  ${NBblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`night_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
fi
}

day_banner() {
if [[ $distroB == *'Linux'* ]];then
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃${Bred}                           ${Bblue}                          \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred} ▀█▀ █  █ █▀▀ █▀▄▀█ █▀▀   ${Bblue}${Sblue} █▀▀ █▀▀▄ █▀▀▀ ▀ █▀▀▄ █▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred}  █  █▀▀█ █▀▀ █ ▀ █ █▀▀ ${Sreset}▀▀${Bblue}${Sblue} █▀▀ █  █ █ ▀█ █ █  █ █▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred}  ▀  ▀  ▀ ▀▀▀ ▀   ▀ ▀▀▀   ${Bblue}${Sblue} ▀▀▀ ▀  ▀ ▀▀▀▀ ▀ ▀  ▀ ▀▀▀ \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`day_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
else
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃${Bred}                          ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred} ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ ${Sreset}▃▃${Bblue} ${Sblue} █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred}  █  █▀█ ██▄ █ ▀ █ ██▄   ${Bblue} ${Sblue} ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred}                          ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`day_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
fi
}

#..............................................................
#..............................................................

night() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          night_banner
line5
      night_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     night_banner
line5
  night_options
night_updater

#..............................................................

RCUSR
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      night_banner
line5
   night_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    night_banner
line5
  night_options
night_updater

#..............................................................

RCUSR
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
	cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi
}

#..............................................................
#..............................................................

light() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          day_banner
        line5
      day_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     day_banner
    line5
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      day_banner
    line5
   day_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    day_banner
   line5
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
         PUT 15 1
       line4
      PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi
}

#..............................................................
#..............................................................

## Auto Theme

default() {
if [ $night -gt "17" ] || [ $night -lt "06" ];then
night
else
light
fi
}

#..............................................................

                          "$THEME"

#..............................................................

#       Thanks for using Theme-Engine.
